---

layout: post

title: "Leetcode-前缀树"

---

Trie（发音类似 "try"）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。

<img src="/_posts/typora-user-images/Triedatastructure.png"/>

~~~python
class TrieNode():
	def __init__(self):
		self.nodes = {}
		self.is_leaf = False

class Trie():
	def __init__(self):
		self.root = TrieNode()

	def insert(self, word):
		curnode = self.root
		for i in word:
			if i not in curnode.nodes:
				curnode.nodes[i] = TrieNode()
			curnode = curnode.nodes[i]
		curnode.is_leaf = True

	def insert_words(self, words):
		for word in words:
			self.insert(word)

	def search(self, word):
		curnode = self.root
		for i in word:
			if i not in curnode.nodes:
				return False
			curnode = curnode.nodes[i]
		return curnode.is_leaf
~~~

时间复杂度：插入和查找都是 $O(key\_length)$

空间复杂度：$O(ALPHABET\_SIZE*key\_length*N)$
