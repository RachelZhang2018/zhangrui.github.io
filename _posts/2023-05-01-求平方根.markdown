---

layout: post

title: "Leetcode-求平方根"

---

# 求平方根

求其中的正数平方根，保留整数。

## 转换为对数

$$
\sqrt{x} = x^{\frac{1}{2}} = (e^{\ln x})^{1/2} = e^{\frac{1}{2}\ln x}
$$

~~~python
class Solution:
    def mySqrt(self, x: int) -> int:
        if x == 0:
            return 0
        ans = int(math.exp(0.5 * math.log(x)))
        return ans + 1 if (ans + 1) ** 2 <= x else ans
~~~

## 二分查找

在 [0, x] 的范围内进行二分查找。

~~~python
class Solution:
    def mySqrt(self, x: int) -> int:
        l, r, ans = 0, x, -1
        while l <= r:
            mid = (l + r) // 2
            if mid * mid <= x:
                ans = mid
                l = mid + 1
            else:
                r = mid - 1
        return ans
~~~

## 牛顿迭代

切线是曲线的线性逼近。

<img src="./typora-user-images/image-20230504230406287.png"/>

曲线方程为 $f(x) = x^2 - C$，从 $x_0$ 处开始迭代，则在 $x_0$ 点出的切线为：
$$
y-f(x_0) = 2x_0(x - x_0)
$$
其与 x 轴的交点为
$$
x_1 = \frac{1}{2}(x_0 + \frac{C}{x_0})
$$
一直这样迭代下去，直到最近更新的两个交点十分接近。

~~~python
class Solution:
    def mySqrt(self, x: int) -> int:
        if x == 0:
            return 0
        
        C, x0 = float(x), float(x)
        while True:
            xi = 0.5 * (x0 + C / x0)
            if abs(x0 - xi) < 1e-7:
                break
            x0 = xi
        
        return int(x0)
~~~



## 梯度下降

构造函数 $f(x)=(x^2-C)^2$，将求平方根问题转化为求 $f(x)$ 的最小值。
$$
\frac{df}{dx} = 4x(x^2-C)
$$

~~~python
def gradient_descent_sqrt(a, x0, alpha, max_iter, tol):
    x = x0
    for i in range(max_iter):
        grad = 4 * x * (x**2 - a)
        x_new = x - alpha * grad
        if abs(x_new - x) < tol:
            break
        x = x_new
        print(x)
    return x

a = 16  # 求 16 的平方根
x0 = 1  # 初始点
alpha = 0.05  # 学习率
max_iter = 1000  # 最大迭代次数
tol = 1e-6  # 停止准则

x_sqrt = gradient_descent_sqrt(a, x0, alpha, max_iter, tol)
print("sqrt({}) = {}".format(a, x_sqrt))
~~~

