---

layout: post

title: "Leetcode-华为笔试题"

---

# 停车场需要开启的最少监控数量

停车场的停车情况如下：

~~~
0 0 0 0
0 1 0 1
1 0 0 0
0 1 1 0
~~~

其中1代表停了车，0代表没停车。每个停车位有一个监控，当本身停了车或者前后左右有车时，需要开启监控。求最少要开启多少监控。

解答：数下关闭的监控数量，用总车位数减去它。

==代码参见迷宫问题的for...else...==

# 停车时与其他车的最大距离

一横排的停车位如下，1代表停了车，0代表没停车。

~~~
1 0 0 0 0 1 0 0 1 0 1
~~~

停车的时候，使最近的车距离最大，求最大距离。

如上，停在3，离最近的车是1，最大距离是3-1=2；或者停在4，距离最近的车是6，最大距离是6-4=2。

解答：

记录每个1的位置，求其最大间隔max_dist，那么停中间时最大距离是max_dist//2。

注意和头尾能停的最大距离进行比较，答案是left_dist, right_dist, max_dist//2求最大值。

# 可观看的最大节目数

题目：给出演出节目单，列出每个节目的开始时间和表演持续时间，每个节目看完后最少间隔15分钟才能看下一场，求可以观看的最大节目数。

例如：

输入：

~~~
0 60
80 200
80 10
105 10
140 10
~~~

输出：

~~~
4
~~~

可以观看第1、3、4、5个节目，共4个。

解法：

1. 算出每个节目结束时间并加15:

~~~
0 75
80 295
80 105
105 130
140 165
~~~

2. 按照最后一列排序

   ~~~
   0 75
   80 105
   105 130
   140 165
   80 295
   ~~~

3. 计数：下个节目开始时间>=上个节目结束时间，就可以计数1。



代码：

~~~python
# calculate play finish time plus 15
for play in timetable:
    play[1] += play[0] + 15

# sort by finish time
timetable = sorted(timetable, key=lambda x:x[1])

# count play number
max_play_num = 0
cur_finish = timetable[0][1]
for i in range(1, count_play):
    next_start = timetable[i][0]
    if next_start >= cur_finish:
        max_play_num += 1
        cur_finish = timetable[i][1]
print(max_play_num+1)
~~~



$\color{red}{\text{注意！最后只通过95\%的测试用例！！！}}$